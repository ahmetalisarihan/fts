// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
  role Role @default(USER)
  accounts      Account[]
}

enum Role{
    USER
    ADMIN
}

model Product{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  isRecommended Boolean
  brandName     String?
  brand         Brand? @relation(fields: [brandName], references: [brandName])
  imageUrl      String?
  catName       String?
  category      Category? @relation(fields: [catName], references: [catName])
  subcatName    String?
  subcategory   Subcategory? @relation(fields: [subcatName], references: [subcatName])
  priceName     String? 
  priceList     PriceList? @relation(fields: [priceName], references: [priceName])
  image         String?
  publicId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Brand{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  brandName     String   @unique
  description   String
  products      Product[]
  productIDs    String[] @db.ObjectId

}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  catName String   @unique
  description String
  subcategories Subcategory[]
  products Product[]
  productIDs String[] @db.ObjectId 
}

model Subcategory {  
  id      String   @id @default(auto()) @map("_id") @db.ObjectId  
  subcatName String   @unique  
  description String 
  catName String 
  category Category? @relation(fields: [catName], references: [catName])
  products Product[]  
  productIDs String[] @db.ObjectId 
  }


model PriceList{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  priceName     String  @unique
  price         String? 
  pdfUrl        String?
  products      Product[]
  productIDs String[] @db.ObjectId 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
